/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MdButton {
        "buttonType": 'button' | 'submit' | 'reset';
        "disabled": boolean;
        "size": 'small' | 'medium' | 'large';
    }
    interface MdCheckbox {
        "checked": boolean;
    }
    interface MdDropdownList {
        "items": string[];
    }
    interface MdInput {
        "disabled": boolean;
        "placeholder": string;
        "value": string;
    }
    interface MdModal {
        "close": () => Promise<void>;
        "isOpen": boolean;
        "modalTitle": string;
        "open": () => Promise<void>;
    }
    interface MdTabPanel {
        "tabs": string;
    }
    interface MdUserCard {
        "avatar": string;
        "direction": 'vertical' | 'horizontal';
        "email": string;
        "name": string;
    }
}
export interface MdButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMdButtonElement;
}
export interface MdCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMdCheckboxElement;
}
export interface MdInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMdInputElement;
}
export interface MdModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMdModalElement;
}
export interface MdUserCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMdUserCardElement;
}
declare global {
    interface HTMLMdButtonElementEventMap {
        "buttonClick": void;
    }
    interface HTMLMdButtonElement extends Components.MdButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMdButtonElementEventMap>(type: K, listener: (this: HTMLMdButtonElement, ev: MdButtonCustomEvent<HTMLMdButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMdButtonElementEventMap>(type: K, listener: (this: HTMLMdButtonElement, ev: MdButtonCustomEvent<HTMLMdButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMdButtonElement: {
        prototype: HTMLMdButtonElement;
        new (): HTMLMdButtonElement;
    };
    interface HTMLMdCheckboxElementEventMap {
        "changeEvent": boolean;
    }
    interface HTMLMdCheckboxElement extends Components.MdCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMdCheckboxElementEventMap>(type: K, listener: (this: HTMLMdCheckboxElement, ev: MdCheckboxCustomEvent<HTMLMdCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMdCheckboxElementEventMap>(type: K, listener: (this: HTMLMdCheckboxElement, ev: MdCheckboxCustomEvent<HTMLMdCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMdCheckboxElement: {
        prototype: HTMLMdCheckboxElement;
        new (): HTMLMdCheckboxElement;
    };
    interface HTMLMdDropdownListElement extends Components.MdDropdownList, HTMLStencilElement {
    }
    var HTMLMdDropdownListElement: {
        prototype: HTMLMdDropdownListElement;
        new (): HTMLMdDropdownListElement;
    };
    interface HTMLMdInputElementEventMap {
        "changeEvent": string;
    }
    interface HTMLMdInputElement extends Components.MdInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMdInputElementEventMap>(type: K, listener: (this: HTMLMdInputElement, ev: MdInputCustomEvent<HTMLMdInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMdInputElementEventMap>(type: K, listener: (this: HTMLMdInputElement, ev: MdInputCustomEvent<HTMLMdInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMdInputElement: {
        prototype: HTMLMdInputElement;
        new (): HTMLMdInputElement;
    };
    interface HTMLMdModalElementEventMap {
        "closeModal": void;
    }
    interface HTMLMdModalElement extends Components.MdModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMdModalElementEventMap>(type: K, listener: (this: HTMLMdModalElement, ev: MdModalCustomEvent<HTMLMdModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMdModalElementEventMap>(type: K, listener: (this: HTMLMdModalElement, ev: MdModalCustomEvent<HTMLMdModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMdModalElement: {
        prototype: HTMLMdModalElement;
        new (): HTMLMdModalElement;
    };
    interface HTMLMdTabPanelElement extends Components.MdTabPanel, HTMLStencilElement {
    }
    var HTMLMdTabPanelElement: {
        prototype: HTMLMdTabPanelElement;
        new (): HTMLMdTabPanelElement;
    };
    interface HTMLMdUserCardElementEventMap {
        "cardClicked": void;
    }
    interface HTMLMdUserCardElement extends Components.MdUserCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMdUserCardElementEventMap>(type: K, listener: (this: HTMLMdUserCardElement, ev: MdUserCardCustomEvent<HTMLMdUserCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMdUserCardElementEventMap>(type: K, listener: (this: HTMLMdUserCardElement, ev: MdUserCardCustomEvent<HTMLMdUserCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMdUserCardElement: {
        prototype: HTMLMdUserCardElement;
        new (): HTMLMdUserCardElement;
    };
    interface HTMLElementTagNameMap {
        "md-button": HTMLMdButtonElement;
        "md-checkbox": HTMLMdCheckboxElement;
        "md-dropdown-list": HTMLMdDropdownListElement;
        "md-input": HTMLMdInputElement;
        "md-modal": HTMLMdModalElement;
        "md-tab-panel": HTMLMdTabPanelElement;
        "md-user-card": HTMLMdUserCardElement;
    }
}
declare namespace LocalJSX {
    interface MdButton {
        "buttonType"?: 'button' | 'submit' | 'reset';
        "disabled"?: boolean;
        "onButtonClick"?: (event: MdButtonCustomEvent<void>) => void;
        "size"?: 'small' | 'medium' | 'large';
    }
    interface MdCheckbox {
        "checked"?: boolean;
        "onChangeEvent"?: (event: MdCheckboxCustomEvent<boolean>) => void;
    }
    interface MdDropdownList {
        "items"?: string[];
    }
    interface MdInput {
        "disabled"?: boolean;
        "onChangeEvent"?: (event: MdInputCustomEvent<string>) => void;
        "placeholder"?: string;
        "value"?: string;
    }
    interface MdModal {
        "isOpen"?: boolean;
        "modalTitle"?: string;
        "onCloseModal"?: (event: MdModalCustomEvent<void>) => void;
    }
    interface MdTabPanel {
        "tabs"?: string;
    }
    interface MdUserCard {
        "avatar"?: string;
        "direction"?: 'vertical' | 'horizontal';
        "email"?: string;
        "name"?: string;
        "onCardClicked"?: (event: MdUserCardCustomEvent<void>) => void;
    }
    interface IntrinsicElements {
        "md-button": MdButton;
        "md-checkbox": MdCheckbox;
        "md-dropdown-list": MdDropdownList;
        "md-input": MdInput;
        "md-modal": MdModal;
        "md-tab-panel": MdTabPanel;
        "md-user-card": MdUserCard;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "md-button": LocalJSX.MdButton & JSXBase.HTMLAttributes<HTMLMdButtonElement>;
            "md-checkbox": LocalJSX.MdCheckbox & JSXBase.HTMLAttributes<HTMLMdCheckboxElement>;
            "md-dropdown-list": LocalJSX.MdDropdownList & JSXBase.HTMLAttributes<HTMLMdDropdownListElement>;
            "md-input": LocalJSX.MdInput & JSXBase.HTMLAttributes<HTMLMdInputElement>;
            "md-modal": LocalJSX.MdModal & JSXBase.HTMLAttributes<HTMLMdModalElement>;
            "md-tab-panel": LocalJSX.MdTabPanel & JSXBase.HTMLAttributes<HTMLMdTabPanelElement>;
            "md-user-card": LocalJSX.MdUserCard & JSXBase.HTMLAttributes<HTMLMdUserCardElement>;
        }
    }
}
